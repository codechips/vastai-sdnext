# GitHub Actions workflow for automated Docker image building and publishing
# Builds and pushes Docker images to GitHub Container Registry on main branch pushes

name: Docker Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: codechips/vastai-sdnext

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Check out the repository's code
      uses: actions/checkout@v4
      
    - name: Get short SHA
      id: sha
      run: echo "short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
      
    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=sha,prefix={{date 'YYYYMMDD'}}-
          type=ref,event=branch
          type=raw,value={{date 'YYYYMMDD'}}
        labels: |
          org.opencontainers.image.title=VastAI SD.Next
          org.opencontainers.image.description=SD.Next Docker image for Vast.ai with automated provisioning
          org.opencontainers.image.vendor=codechips
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SDNEXT_VERSION=main
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        provenance: false
        
    - name: Test image
      if: success()
      run: |
        echo "🧪 Testing built image..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest echo "Image test successful"
        
    - name: Create build summary
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags**:" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}"
        echo "**Platform**: linux/amd64 only (ARM64 support coming later)"
        echo "**Build Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "**Commit SHA**: ${{ github.sha }}"
        
    - name: Report failure
      if: failure()
      run: |
        echo "## ❌ Docker Build Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Error**: Build process failed" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Common Solutions**:" >> $GITHUB_STEP_SUMMARY
        echo "- Check Dockerfile syntax" >> $GITHUB_STEP_SUMMARY
        echo "- Verify base image availability" >> $GITHUB_STEP_SUMMARY
        echo "- Review recent changes" >> $GITHUB_STEP_SUMMARY >> $GITHUB_STEP_SUMMARY
