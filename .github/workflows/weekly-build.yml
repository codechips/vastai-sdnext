name: Weekly Build & Cleanup

on:
  push:
    branches: [ main ]
  schedule:
    # Weekly on Sunday at 2 AM UTC to catch upstream SD.Next changes
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: codechips/vastai-sdnext

permissions:
  contents: read
  packages: write

jobs:
  build-and-cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Check out the repository's code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
      
    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate tags and labels
      id: meta
      run: |
        # Generate date-based tags
        DATE=$(date -u '+%Y%m%d')
        WEEK=$(date -u '+%Y-W%U')
        
        # Different tagging for scheduled vs push builds
        if [ "${{ github.event_name }}" = "schedule" ]; then
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${WEEK},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${DATE}"
          BUILD_TYPE="weekly"
        else
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${DATE}"
          BUILD_TYPE="push"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "build-type=${BUILD_TYPE}" >> $GITHUB_OUTPUT
        echo "date=${DATE}" >> $GITHUB_OUTPUT
        echo "week=${WEEK}" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SDNEXT_VERSION=master
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=VastAI SD.Next
          org.opencontainers.image.description=SD.Next Docker image for Vast.ai with automated provisioning
          org.opencontainers.image.vendor=codechips
          org.opencontainers.image.created=${{ steps.meta.outputs.date }}
        provenance: false
        
    - name: Test image
      if: success()
      run: |
        echo "🧪 Testing built image..."
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest echo "Image test successful"

    - name: Clean up old versions
      if: success()
      uses: actions/delete-package-versions@v5
      with:
        package-name: 'vastai-sdnext'
        package-type: 'container'
        min-versions-to-keep: 3
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create build summary
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "## ✅ Build Summary" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ steps.meta.outputs.build-type }} build" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: ${{ steps.meta.outputs.date }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "**Week**: ${{ steps.meta.outputs.week }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Retention**: 3 versions kept" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" != "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Troubleshooting**:" >> $GITHUB_STEP_SUMMARY
          echo "- Check Dockerfile syntax" >> $GITHUB_STEP_SUMMARY
          echo "- Verify base image availability" >> $GITHUB_STEP_SUMMARY
          echo "- Review recent changes" >> $GITHUB_STEP_SUMMARY
        fi